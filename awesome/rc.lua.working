-- If LuaRocks is installed, make sure that packages installed through it are
-- found (e.g. lgi). If LuaRocks is not installed, do nothing.
pcall(require, "luarocks.loader")

-- Standard awesome library
local gears = require("gears")
local awful = require("awful")
require("awful.autofocus")
-- Widget and layout library
local wibox = require("wibox")
-- Theme handling library
local beautiful = require("beautiful")
-- Notification library
local naughty = require("naughty")
local menubar = require("menubar")
local hotkeys_popup = require("awful.hotkeys_popup")
-- Enable hotkeys help widget for VIM and other apps
-- when client with a matching name is opened:
require("awful.hotkeys_popup.keys")


-- cal
local lain      = require("lain")
--local markup 	= lain.util.markup

--
-- awesome widgets
local apt_widget = require("awesome-wm-widgets.apt-widget.apt-widget")
local battery_widget = require("awesome-wm-widgets.battery-widget.battery")
local brightness_widget = require("awesome-wm-widgets.brightness-widget.brightness")
--local calendar_widget = require("awesome-wm-widgets.calendar-widget.calendar")
local cpu_widget = require("awesome-wm-widgets.cpu-widget.cpu-widget")
local net_speed_widget = require("awesome-wm-widgets.net-speed-widget.net-speed")
local volume_widget = require('awesome-wm-widgets.volume-widget.volume')
local weather_widget = require("awesome-wm-widgets.weather-widget.weather")
local fs_widget = require("awesome-wm-widgets.fs-widget.fs-widget")
local mpdarc_widget = require("awesome-wm-widgets.mpdarc-widget.mpdarc")
local todo_widget = require("awesome-wm-widgets.todo-widget.todo")
local ram_widget = require("awesome-wm-widgets.ram-widget.ram-widget")
local batteryarc_widget = require("awesome-wm-widgets.batteryarc-widget.batteryarc")
--local logout_menu_widget = require("awesome-wm-widgets.logout-menu-widget.logout-menu") -- works
local brightness_widget = require("awesome-wm-widgets.brightness-widget.brightness")
local logout_popup = require("awesome-wm-widgets.logout-popup-widget.logout-popup")
--
--


-- Load Debian menu entries
local debian = require("debian.menu")
local has_fdo, freedesktop = pcall(require, "freedesktop")

-- {{{ Error handling
-- Check if awesome encountered an error during startup and fell back to
-- another config (This code will only ever execute for the fallback config)
if awesome.startup_errors then
    naughty.notify({ preset = naughty.config.presets.critical,
                     title = "Oops, there were errors during startup!",
                     text = awesome.startup_errors })
end

-- Handle runtime errors after startup
do
    local in_error = false
    awesome.connect_signal("debug::error", function (err)
        -- Make sure we don't go into an endless error loop
        if in_error then return end
        in_error = true

        naughty.notify({ preset = naughty.config.presets.critical,
                         title = "Oops, an error happened!",
                         text = tostring(err) })
        in_error = false
    end)
end
-- }}}

-- {{{ Variable definitions
-- Themes define colours, icons, font and wallpapers.
beautiful.init("/home/avdzm/.config/awesome/themes/dracula/theme.lua")
--beautiful.init("/home/avdzm/.config/awesome/themes/powerarrow-blue/theme.lua")

-- This is used later as the default terminal and editor to run.
terminal = "alacritty"
--editor = os.getenv("EDITOR") or "editor"
editor = "vim "
editor_cmd = terminal .. " -e " .. editor --..  editor

-- Default modkey.
-- Usually, Mod4 is the key with a logo between Control and Alt.
-- If you do not like this or do not have such a key,
-- I suggest you to remap Mod4 to another key using xmodmap or other tools.
-- However, you can use another modifier like Mod1, but it may interact with others.
modkey = "Mod4"

-- Table of layouts to cover with awful.layout.inc, order matters.
awful.layout.layouts = {
    awful.layout.suit.fair,
    awful.layout.suit.fair.horizontal,
    awful.layout.suit.tile,
    awful.layout.suit.tile.left,
    -- awful.layout.suit.tile.bottom,
    awful.layout.suit.tile.top,
    awful.layout.suit.floating,
    -- awful.layout.suit.spiral,
    -- awful.layout.suit.spiral.dwindle,
    awful.layout.suit.max,
    awful.layout.suit.max.fullscreen,
    -- awful.layout.suit.magnifier,
    -- awful.layout.suit.corner.nw,
    -- awful.layout.suit.corner.ne,
    -- awful.layout.suit.corner.sw,
    -- awful.layout.suit.corner.se,
}
-- }}}

--beautiful.init(string.format( "/home/avdzm/.config/awesome/themes/%s/theme.lua", chosen_theme))

-- {{{ Menu
-- Create a launcher widget and a main menu
myawesomemenu = {
   { "hotkeys", function() hotkeys_popup.show_help(nil, awful.screen.focused()) end },
   { "manual", terminal .. " -- man awesome" },
   { "edit config", editor_cmd .. awesome.conffile },
   { "edit theme", editor_cmd .. "/home/avdzm/.config/awesome/themes/dracula/theme.lua"},
   { "restart", awesome.restart },
   { "quit", function() awesome.quit() end },
}

local menu_awesome = { "Awesome", myawesomemenu, beautiful.awesome_icon }
local menu_terminal = { "Open Terminal", terminal,'/usr/share/icons/Dracula/apps/scalable/terminal.svg' }

if has_fdo then
    mymainmenu = freedesktop.menu.build({
        before = { menu_awesome },
        after =  { menu_terminal }
    })
else
	mymainmenu = awful.menu({
		items = {
			menu_awesome,
			{ "Debian", debian.menu.Debian_menu.Debian },
			  menu_terminal,
		}
    })
end


mylauncher = awful.widget.launcher({ image = beautiful.awesome_icon,
                                     menu = mymainmenu })

-- Menubar configuration
menubar.utils.terminal = terminal -- Set the terminal for applications that require it
-- }}}

-- Keyboard map indicator and switcher
mykeyboardlayout = awful.widget.keyboardlayout()

-- {{{ Wibar
-- Create a textclock widget
mytextclock = wibox.widget.textclock(" %a %d %B,  %H:%M:%S",1)
mytextclock.font      = beautiful.font1 --"JetBrains Mono Bold 13"
--local month_calendar = awful.widget.calendar_popup.month()
--month_calendar:attach( mytextclock, "tr" )

-- Lain Widgets
-- Calendar
local cal = lain.widget.cal({
	cal = "cal --color=always",
	attach_to = { mytextclock },
	notification_preset = {
		font = "Ubuntu Mono 14",
		fg   = beautiful.fg_normal,
		bg   = beautiful.bg_normal,
		position = "top_middle",
    screen = awful.screen.focused().index
	}
})

local aptPackages = awful.widget.watch('bash -c "/home/avdzm/.local/bin/aptGetUpdate"',3600)
aptPackages:buttons(awful.util.table.join(
	--[[awful.button({ }, 1, 
	  function() 
			
	  end),]]
	awful.button({ }, 3, --right click to launch  
	  function() 
		awful.util.spawn(terminal .. " -e sudo apt upgrade")
	  end)
	)
)




--[[
-- CPU
local cpu = lain.widget.cpu({
    settings = function()
        widget:set_markup(markup.fontfg(beautiful.font2, beautiful.fg_normal , "  "..cpu_now.usage .. "% "))

--(markup.fontfg("JetBrains Mono Bold 13:Font Awesome 5 Free Solid 12", beautiful.fg_normal , "  "..cpu_now.usage .. "% "))
    end
})

-- MEM
local memory = lain.widget.mem({
    settings = function()
        widget:set_markup(markup.fontfg(beautiful.font2, beautiful.fg_normal , "  "..mem_now.perc .. "% "))
    end
}) ]]


--local cw = calendar_widget()
-- or customized
--local cw = calendar_widget({
--    theme = 'dracula',
--   placement = 'top_center',
--    radius = 8,
--})
--mytextclock:connect_signal("button::press", 
--    function(_, _, _, button)
--        if button == 1 then cw.toggle() end
--    end)


--cmus audio player
local muiscLogo = wibox.widget{
	markup = " |  ",
	font="Font Awesome 5 Free Solid Bold 14",
	widget = wibox.widget.textbox
}
--muiscLogo.font="Font Awesome 5 Free Solid Bold 12"


local cmus, cmus_timer = awful.widget.watch(
    "cmus-remote -Q",
    1,
    function(widget, stdout)
        local cmus_now = {
            state   = "N/A",
            artist  = "N/A",
            title   = "N/A",
            album   = "N/A"
        }

        for w in string.gmatch(stdout, "(.-)tag") do
            a, b = w:match("(%w+) (.-)\n")
            cmus_now[a] = b
        end

        -- customize here     
		font = "Ubuntu Mono 22"
		--widget.font="Font Awesome 5 Free Solid Bold 12"
        widget:set_text(cmus_now.artist .. " - " .. cmus_now.title)
		
    end
)
--cmus.font="Font Awesome 5 Free Solid Bold 12"

local mocp, mocp_timer = awful.widget.watch(
	"mocp -i", 1,
	function (widget, stdout)
		local mocp_now = {
			State   = "N/A",
            Artist  = "N/A",
            Title   = "N/A",
            Album   = "N/A"
		}

		--mocp_now.Artist = string.match(stdout, "Artist:")
		--mocp_now.Title = string.match(stdout, "Title:")

		--naughty.notify({title = "stdout=" .. stdout})
		for w in string.gmatch(stdout, "[^\r\n]+") do --(.-)tag \n  [^\r\n]+
			--a, b = w:match("(%w+) (.+)")
			--mocp_now[a] = b
			if string.match(w, "^.-:") == "State:" then 
				mocp_now.State = string.sub(string.match(w, ": .*"),3)
			end
			

			if string.match(w, "^.-:") == "Artist:" then 
				mocp_now.Artist = string.sub(string.match(w, ": .*"),3)
			end

			if string.match(w, "^.-:") == "SongTitle:" then 
				mocp_now.Title = string.sub(string.match(w, ": .*"),3)
			end
			--mocp_now.Title = string.match(w, "Title: (.-$)")
			--naughty.notify({title = w })
		end
		
		--naughty.notify({title = "artist=" .. mocp_now.Artist .. " title=" .. mocp_now.Title})

		font = "Ubuntu Mono Bold 22"
		if mocp_now.State=="PLAY" then
			widget:set_text(mocp_now.Artist .. " - " .. mocp_now.Title)
		else
			widget:set_text("Not playing")
		end
	end
)

--mocp.font="Ubuntu Mono Bold 20"

mocp:buttons(awful.util.table.join(
	--[[awful.button({ }, 1, 
	  function() 
			
	  end),]]
	awful.button({ }, 3, 
	  function() 
		awful.util.spawn(terminal .. " -e mocp")
	  end)
	)
)




--[[ MOCP current
function shortenText(text, length)
  if string.len(text) <= length then
    return text
  else
    return string.sub(text, 1, length - 3 ) .. "..."
  end
end

lastSongFile = ""
lastState = ""

mocpwidget = wibox.widget.textbox()
mocpwidget:buttons(awful.util.table.join(
 awful.button({ }, 1, 
  function() 
    if lastState == "PLAY" then
      io.popen("mocp -P")
    elseif lastState == nil or lastState=="" then
      io.popen("mocp -S")
      io.popen("mocp -p")
    elseif lastState == "PAUSE" then
      io.popen("mocp -U")
    else
      io.popen("mocp -p")
    end
  end),
 awful.button({ }, 3, 
  function() 
    awful.util.spawn(terminal .. " -e mocp")
  end)
)
)
mocpwidget:set_markup("<span color='#bccf02'>MOCP:</span> OFF ")

mocprogress = awful.widget.progressbar()
mocprogress:set_color("#bccf02")
mocprogress:set_width(20)
mocprogress:set_height(5)


mocpnext = wibox.widget.textbox()
mocpnext:set_markup(" <span color='#bccf02'>".. utf8.char(61515) .. utf8.char(61515) .."</span> |")
mocpnext:buttons(awful.util.table.join(
 awful.button({ }, 1, 
  function() 
    if lastState == "PLAY" then
      io.popen("mocp -f")
    else
      io.popen("mocp -f")
      io.popen("mocp -p")
    end
  end)
))

mocpShuffleEnabled = false
mocpshuffle = wibox.widget.textbox()   --ff3333
mocpshuffle:set_markup(" <span color='#CAA9FA'>".. utf8.char(61556) .."</span> ")
mocpshuffle:buttons(awful.util.table.join(
 awful.button({ }, 1, 
  function() 
    if mocpShuffleEnabled then
      mocpshuffle:set_markup(" <span color='#CAA9FA'>".. utf8.char(61556) .."</span> ")
      mocpShuffleEnabled = false
      io.popen("mocp -u shuffle")
    else
      mocpshuffle:set_markup(" <span color='#bccf02'>".. utf8.char(61556) .."</span> ")
      mocpShuffleEnabled = true
      io.popen("mocp -o shuffle")
    end
  end)
))

mocptimer = timer({ timeout = 1 })
mocptimer:connect_signal("timeout",
  function()
-- SONGTITLE=$(mocp -i | grep 'SongTitle:' | sed -e 's/^.*: //');
-- ARTIST=$(mocp -i | grep 'Artist:' | sed -e 's/^.*: //');
-- ALBUM=$(mocp -i | grep 'Album:' | sed -e 's/^.*: //');   
    songTitle = io.popen("mocp -i | grep 'SongTitle:' | sed -e 's/^.*: //'"):read() 
    songArtist = io.popen("mocp -i | grep 'Artist:' | sed -e 's/^.*: //'"):read() 
    songAlbum = io.popen("mocp -i | grep 'Album:' | sed -e 's/^.*: //'"):read()
    songFile = io.popen("mocp -i | grep 'File:' | sed -e 's/^.*: //'"):read()
    songState = io.popen("mocp -i | grep 'State:' | sed -e 's/^.*: //'"):read()
    songTotalS = io.popen("mocp -i | grep 'TotalSec:' | sed -e 's/^.*: //'"):read()
    songCurrentS = io.popen("mocp -i | grep 'CurrentSec:' | sed -e 's/^.*: //'"):read()
    if songFile == nil then
      return
    end
    if songTotalS ~= nil and songCurrentS ~= nil then
      songTotalS = tonumber(songTotalS)
      songCurrentS = tonumber(songCurrentS)
      if songCurrentS > 0 and songTotalS > 0 then
        mocprogress:set_value(songCurrentS / songTotalS)
      end
    end

    if songFile ~= lastSongFile then
      naughty.notify({
        text = "(" .. songArtist .. ", " .. songAlbum .. ")",
        title = songTitle,
        position = "top_right",
        timeout = 5,
        --icon="/usr/share/icons/Super-Flat-Remix/actions/scalable/pan-end.svg",
		icon="/usr/share/icons/Dracula/apps/scalable/music_icon-24.svg",
      })
      lastSongFile = songFile
    end
    songString = ""
    lastState = songState
    if songTitle ~= "" then
      songString = "<span color='#bccf02'>".. songTitle .."</span> "
    end
    if songAlbum ~= "" or songArtist ~= "" then
      songString = songString .. "("
    end
    if songArtist ~= "" then
      songString = songString .. " " .. shortenText(songArtist, 15)
    end
    if songAlbum ~= "" and songArtist ~= "" then
      songString = songString .. ", "
    end
    if songAlbum ~= "" then
      songString = songString .. " " .. shortenText(songAlbum, 15)
    end
    if songAlbum ~= "" or songArtist ~= "" then
      songString = songString .. ")"
    end
    if songString ~= "" then
      songString = songString .. " "
    else
      songString = "File playing: ".. songFile:match("^.+/(.+)$") .." "
    end
    if songState == "PLAY" then
      songString = " <span color='#CAA9FA'>".. utf8.char(61515) .."</span> " .. songString
    elseif songState == "PAUSE" then
      songString = " <span color='#CAA9FA'>".. utf8.char(61516) .."</span> " .. songString
    else
      songString = "  " .. songString
    end
    mocpwidget:set_markup(songString)
  end
)
mocptimer:start()

-- MOCP ]]


-- Create a wibox for each screen and add it
local taglist_buttons = gears.table.join(
    awful.button({ }, 1, function(t) t:view_only() end),
    awful.button({ modkey }, 1, function(t)
                              if client.focus then
                                  client.focus:move_to_tag(t)
                              end
                          end),
    awful.button({ }, 3, awful.tag.viewtoggle),
    awful.button({ modkey }, 3, function(t)
                              if client.focus then
                                  client.focus:toggle_tag(t)
                              end
                          end),
    awful.button({ }, 4, function(t) awful.tag.viewnext(t.screen) end),
    awful.button({ }, 5, function(t) awful.tag.viewprev(t.screen) end)
)

local tasklist_buttons = gears.table.join(
	awful.button({ }, 1, function (c)
							if c == client.focus then
								c.minimized = true
							else
								c:emit_signal(
									"request::activate",
									"tasklist",
									{raise = true}
								)
							end
						 end),
     awful.button({ }, 3, function()
                              awful.menu.client_list({ theme = { width = 250 } })
                          end),
     awful.button({ }, 4, function ()
                              awful.client.focus.byidx(1)
                          end),
     awful.button({ }, 5, function ()
                              awful.client.focus.byidx(-1)
end))

	local function set_wallpaper(s)
		-- Wallpaper
		-- if beautiful.wallpaper then
		--    local wallpaper = beautiful.wallpaper
		--    -- If wallpaper is a function, call it with the screen
		--    if type(wallpaper) == "function" then
		--        wallpaper = wallpaper(s)
		--    end
		--    gears.wallpaper.maximized(wallpaper, s, true)
		-- end
	--awful.util.spawn("nitrogen --restore");
	  awful.util.spawn("feh --randomize /home/avdzm/Pictures/Wallpapers/alternate/ --bg-fill");
	end

	-- Re-set wallpaper when a screen's geometry changes (e.g. different resolution)
	screen.connect_signal("property::geometry", set_wallpaper)

	awful.screen.connect_for_each_screen(function(s)
		-- Wallpaper
		set_wallpaper(s)

		-- Each screen has its own tag table.
		--"" ""
		--awful.tag({ "", "", "", "", "", "" , "", "", "" }, s, awful.layout.layouts[1])
		--awful.tag.font      = "JetBrains Mono Bold 20"
		beautiful.taglist_font= "JetBrains Mono Bold 14"

		-- {{{ Tags
		-- Define a tag table which will hold all screen tags.
		--working    
    awful.tag({ "", "", "", "", "", "" , "", "", ""}, s, awful.layout.layouts[1])

		-- Create a promptbox for each screen
		s.mypromptbox = awful.widget.prompt()
		-- Create an imagebox widget which will contain an icon indicating which layout we're using.
		-- We need one layoutbox per screen.
		s.mylayoutbox = awful.widget.layoutbox(s)
		s.mylayoutbox:buttons(gears.table.join(
		                       awful.button({ }, 1, function () awful.layout.inc( 1) end),
		                       awful.button({ }, 3, function () awful.layout.inc(-1) end),
		                       awful.button({ }, 4, function () awful.layout.inc( 1) end),
		                       awful.button({ }, 5, function () awful.layout.inc(-1) end)))

		-- Create a taglist widget
		s.mytaglist = awful.widget.taglist {
		    screen  = s,
		    filter  = awful.widget.taglist.filter.all,
		    buttons = taglist_buttons
		}

		-- Create a tasklist widget
		s.mytasklist = awful.widget.tasklist {
		    screen  = s,
		    filter  = awful.widget.tasklist.filter.currenttags,
		    buttons = tasklist_buttons
		}

		-- Create the wibox
		s.mywibox = awful.wibar({ position = "top", screen = s })
		
		--Bottom panel having the running apps
		s.bottombox = awful.wibar({ position = "bottom", screen = s })
		
		--Layout for the bottom panel and adding the running apps
		s.bottombox:setup {
			layout = wibox.layout.flex.horizontal, --layout.align.horizontal,
			s.mytasklist,	
		}

		-- Add widgets to the wibox
		s.mywibox:setup {
		    --layout = wibox.layout.align.horizontal,
		    layout = wibox.layout.stack,
		    	{
					layout = wibox.layout.align.horizontal,
					{ -- Left widgets
						layout = wibox.layout.fixed.horizontal,
						mylauncher,
						s.mytaglist,
						muiscLogo,
						--cmus,
						mocp,
						--mocpwidget,
						--s.mylayoutbox,
						--s.mypromptbox,
					},nil,
					{ -- Right widgets
						layout = wibox.layout.fixed.horizontal,
												
						wibox.widget.systray(),
            --awful.widget.watch('bash -c "/home/avdzm/.local/bin/aptGetUpdate"',3600),
            aptPackages,
						--mpdarc_widget,
						--cpu,    -- lain cpu working
						--memory, --lain memory is working...
						--apt_widget(),
						todo_widget(),
						mykeyboardlayout,
						volume_widget({widget_type = 'arc', with_icon=true}), --vertical_bar 'icon' horizontal_bar
						-- wibox.widget.systray(),
						fs_widget(), --{ mounts = { '/' } }),
						ram_widget({color_used=beautiful.fg_urgent,color_free=beautiful.green,color_buf=beautiful.yellow}),
						cpu_widget({
							width = 70,
							step_width = 2,
							step_spacing = 0,
							color = beautiful.fg_normal, -- '#BD93F9', --'#434c5e',
							--enable_kill_button = true
						}),
						net_speed_widget(),
						--weather_curl_widget({
						--    api_key='<your-key>',
						--    coordinates = {45.5017, -73.5673},
						--}),
						
						brightness_widget{
							--type = 'icon_and_text',
							type = 'arc',
							program = 'brightnessctl',
							step = 15,        
						},
						--battery_widget(),
						batteryarc_widget({
							show_current_level = true,
							arc_thickness = 1,
						}),
						
						--logout_menu_widget(),
						s.mylayoutbox,
					},
				},
			{
				mytextclock,
				valign = "center",
				halign = "center",
				layout = wibox.container.place
			}
		}
	end)
	-- }}}

	-- {{{ Mouse bindings on background
	root.buttons(gears.table.join(
		awful.button({ }, 3, function () mymainmenu:toggle() end),
		awful.button({ }, 4, awful.tag.viewnext),
		awful.button({ }, 5, awful.tag.viewprev)
	))
	-- }}}

	-- {{{ Key bindings
	globalkeys = gears.table.join(
		awful.key({ modkey,           }, "s",      hotkeys_popup.show_help,
		          {description="show help", group="awesome"}),
		awful.key({ modkey,           }, "Left",   awful.tag.viewprev,
		          {description = "view previous", group = "tag"}),
		awful.key({ modkey,           }, "Right",  awful.tag.viewnext,
		          {description = "view next", group = "tag"}),
		awful.key({ modkey,           }, "Escape", awful.tag.history.restore,
		          {description = "go back", group = "tag"}),
    
		awful.key({ modkey,           }, "j",
		    function ()
		        awful.client.focus.byidx( 1)
		    end,
		    {description = "focus next by index", group = "client"}
		),
		awful.key({ modkey,           }, "k",
		    function ()
		        awful.client.focus.byidx(-1)
		    end,
		    {description = "focus previous by index", group = "client"}
		),
		awful.key({ modkey,           }, "w", function () mymainmenu:show() end,
		          {description = "show main menu", group = "awesome"}),

		-- Layout manipulation
		awful.key({ modkey, "Shift"   }, "j", function () awful.client.swap.byidx(  1)    end,
		          {description = "swap with next client by index", group = "client"}),
		awful.key({ modkey, "Shift"   }, "k", function () awful.client.swap.byidx( -1)    end,
		          {description = "swap with previous client by index", group = "client"}),
		awful.key({ modkey, "Control" }, "j", function () awful.screen.focus_relative( 1) end,
		          {description = "focus the next screen", group = "screen"}),
		awful.key({ modkey, "Control" }, "k", function () awful.screen.focus_relative(-1) end,
		          {description = "focus the previous screen", group = "screen"}),
		awful.key({ modkey,           }, "u", awful.client.urgent.jumpto,
		          {description = "jump to urgent client", group = "client"}),
		awful.key({ modkey,           }, "Tab", function () awful.client.focus.history.previous() if client.focus then client.focus:raise() end end,
		          {description = "go back", group = "client"}),

		-- Standard program
		awful.key({ modkey,           }, "Return", function () awful.spawn(terminal) end,
		          {description = "open a terminal", group = "launcher"}),
		awful.key({ modkey, "Control" }, "r", awesome.restart,
		          {description = "reload awesome", group = "awesome"}),
		awful.key({ modkey, "Shift"   }, "q", awesome.quit,
		          {description = "quit awesome", group = "awesome"}),

		awful.key({ modkey,           }, "l",     function () awful.tag.incmwfact( 0.05)          end,
		          {description = "increase master width factor", group = "layout"}),
		awful.key({ modkey,           }, "h",     function () awful.tag.incmwfact(-0.05)          end,
		          {description = "decrease master width factor", group = "layout"}),
		awful.key({ modkey, "Shift"   }, "h",     function () awful.tag.incnmaster( 1, nil, true) end,
		          {description = "increase the number of master clients", group = "layout"}),
		awful.key({ modkey, "Shift"   }, "l",     function () awful.tag.incnmaster(-1, nil, true) end,
		          {description = "decrease the number of master clients", group = "layout"}),
		awful.key({ modkey, "Control" }, "h",     function () awful.tag.incncol( 1, nil, true)    end,
		          {description = "increase the number of columns", group = "layout"}),
		awful.key({ modkey, "Control" }, "l",     function () awful.tag.incncol(-1, nil, true)    end,
		          {description = "decrease the number of columns", group = "layout"}),
		awful.key({ modkey,           }, "space", function () awful.layout.inc( 1)                end,
		          {description = "select next", group = "layout"}),
		awful.key({ modkey, "Shift"   }, "space", function () awful.layout.inc(-1)                end,
		          {description = "select previous", group = "layout"}),

		awful.key({ modkey, "Control" }, "n",
		          function ()
		              local c = awful.client.restore()
		              -- Focus restored client
		              if c then
		                c:emit_signal(
		                    "request::activate", "key.unminimize", {raise = true}
		                )
		              end
		          end,
		          {description = "restore minimized", group = "client"}),

		-- Rofi Launcher
		awful.key({ modkey,"Shift" }, "Return",     function () awful.util.spawn("rofi -modi drun -show drun -p `Launch` -show-icons -lines 5 -width 40 -display-drun '' ") end, 
		--awful.screen.focused().mypromptbox:run() end,
		          {description = "Rofi Launcher", group = "launcher"}),
		          
		-- Dmenu Launcher
		awful.key({ modkey,			}, "d",			function () awful.util.spawn("dmenu_run -nb '#22232e' -nf '#CAA9FA' -sb '#BD93F9' -sf '#22232e' -fn UbuntuMono:pixelsize=23") end, 
		--awful.screen.focused().mypromptbox:run() end,
				  {description = "Dmenu Launcher", group = "launcher"}),
						  
		--1337x Launcher			      
		awful.key({ modkey, 		}, "x",			function () awful.spawn("/home/avdzm/.rofi_scripts/rofi_xtorrent.v1.sh") end,
				  {description = "xtorrent search", group = "launcher"}),
		       

		--Pass Launcher			      
		awful.key({ modkey, 		}, "z",			function () awful.spawn("/home/avdzm/.rofi_scripts/rofi-pass/rofi-pass") end,
				  {description = "Pass", group = "launcher"}),
		       
		--MPV Launcher			      
		awful.key({ modkey, 		}, "v",			function () awful.spawn("/home/avdzm/.rofi_scripts/rofi_video_player.sh") end,
				  {description = "MPV Launcher", group = "launcher"}),
			--[[   function ()
		              awful.prompt.run {
		                prompt       = "Run Lua code: ",
		                textbox      = awful.screen.focused().mypromptbox.widget,
		                exe_callback = awful.util.eval,
		                history_path = awful.util.get_cache_dir() .. "/history_eval"
		              }
		          end,
		          {description = "lua execute prompt", group = "awesome"}),]]
		
		-- Menubar <-- Quite cool
		awful.key({ modkey }, "p", function() menubar.show() end,
		          {description = "show the menubar", group = "launcher"}),
		          
		awful.key({"Control" }, "Escape", function() logout_popup.launch() end, 
		          {description = "Show logout screen", group = "awesome"}),
		          
	  -- Brightness
		awful.key({ }, "XF86MonBrightnessDown",		function () awful.util.spawn("brightnessctl s 15-") end,
				  {description = "Lower the screen brightness",		group="screen"}),
		awful.key({ }, "XF86MonBrightnessUp",		function () awful.util.spawn("brightnessctl s 15+") end,
				  {description = "Brighten the screen brightness",	group="screen"}),
		
		--Print screen
		awful.key({}, "Print",			function () awful.util.spawn("scrot -e 'mv $f ~/Pictures/'") end,
				  {description = "Printscreen",	group="screen"}),
		awful.key({"Shift",}, "Print",	function () awful.util.spawn("scrot -u -e 'mv $f ~/Pictures/'") end,
				  {description = "Printscreen selected window",	group="screen"}),
		awful.key({"Control"}, "Print",	function () awful.spawn.with_shell("sleep 0.4 && scrot -s -e 'mv $f ~/Pictures/'") end,
				  {description = "Printscreen select area",	group="screen"}),

		-- Audio    
		awful.key({}, "XF86AudioRaiseVolume", function () awful.util.spawn("amixer -D pulse sset Master 5%+", false) end,
				  {description = "Raise the audio volume",	group="audio"}),
		awful.key({}, "XF86AudioLowerVolume", function () awful.util.spawn("amixer -D pulse sset Master 5%-", false) end,
				  {description = "Lower the audio volume",	group="audio"}),
		awful.key({}, "XF86AudioMute", function () awful.util.spawn("amixer -D pulse sset Master toggle", false) end,
				  {description = "Toggule the audio mute/unmute",	group="audio"}),
		
		--Media Buttons
		awful.key({ }, "XF86AudioPlay", function () awful.util.spawn_with_shell("mocp --toggle-pause") end,
				  {description = "Toggle Play on moc",	group="audio"}),
		awful.key({ }, "XF86AudioNext", function () awful.util.spawn_with_shell("mocp --next") end,
				  {description = "Play next on moc",	group="audio"}),
		awful.key({ }, "XF86AudioPrev", function () awful.util.spawn_with_shell("mocp --previous") end,
				  {description = "Toggle Previous on moc",	group="audio"})
		
	)

	clientkeys = gears.table.join(
		awful.key({ modkey,           }, "f",
		    function (c)
		        c.fullscreen = not c.fullscreen
		        c:raise()
		    end,
		    {description = "toggle fullscreen", group = "client"}),
		awful.key({ modkey, "Shift"   }, "c",      function (c) c:kill()                         end,
		          {description = "close", group = "client"}),

		awful.key({ modkey, "Control" }, "space",  awful.client.floating.toggle                     ,
		          {description = "toggle floating", group = "client"}),

		awful.key({ modkey, "Control" }, "Return", function (c) c:swap(awful.client.getmaster()) end,
		          {description = "move to master", group = "client"}),

		awful.key({ modkey,           }, "o",      function (c) c:move_to_screen()               end,
		          {description = "move to screen", group = "client"}),

		awful.key({ modkey,           }, "t",      function (c) c.ontop = not c.ontop            end,
		          {description = "toggle keep on top", group = "client"}),

		awful.key({ modkey, "Shift" }, "t",      function (c) awful.titlebar.toggle(c) end,
		          {description = "toggle titlebar for window", group = "client"}),

   -- Show/Hide Wibox
   awful.key({ modkey }, "b", function ()
     for s in screen do
       s.mywibox.visible = not s.mywibox.visible
       --s.bottombox.visible= not s.bottombox.visible

       --Checks if there's bottom panel
       if s.bottombox then
         s.bottombox.visible = not s.bottombox.visible
       end
     end
   end,
   {description = "toggle wibox", group = "awesome"}),

    awful.key({ modkey,           }, "n",
		    function (c)
		        -- The client currently has the input focus, so it cannot be
		        -- minimized, since minimized clients can't have the focus.
		        c.minimized = true
		    end ,
		    {description = "minimize", group = "client"}),
		awful.key({ modkey,           }, "m",
		    function (c)
		        c.maximized = not c.maximized
		        c:raise()
		    end ,
		    {description = "(un)maximize", group = "client"}),
		awful.key({ modkey, "Control" }, "m",
		    function (c)
		        c.maximized_vertical = not c.maximized_vertical
		        c:raise()
		    end ,
		    {description = "(un)maximize vertically", group = "client"}),
		
		awful.key({ modkey, "Shift"   }, "m",
		    function (c)
		        c.maximized_horizontal = not c.maximized_horizontal
		        c:raise()
		    end ,
		    {description = "(un)maximize horizontally", group = "client"}),
		
		--Makes window sticky
		awful.key({ modkey, "Shift"   }, "s",
		    function (c)
			    c.sticky = not c.sticky
		        c:raise()
		    end ,
		    {description = "Sticky Window", group = "client"})    
	)

	-- Bind all key numbers to tags.
	-- Be careful: we use keycodes to make it work on any keyboard layout.
	-- This should map on the top row of your keyboard, usually 1 to 9.
	for i = 1, 9 do
		globalkeys = gears.table.join(globalkeys,
		    -- View tag only.
		    awful.key({ modkey }, "#" .. i + 9,
		              function ()
		                    local screen = awful.screen.focused()
		                    local tag = screen.tags[i]
		                    if tag then
		                       tag:view_only()
		                    end
		              end,
		              {description = "view tag #"..i, group = "tag"}),
		    -- Toggle tag display.
		    awful.key({ modkey, "Control" }, "#" .. i + 9,
		              function ()
		                  local screen = awful.screen.focused()
		                  local tag = screen.tags[i]
		                  if tag then
		                     awful.tag.viewtoggle(tag)
		                  end
		              end,
		              {description = "toggle tag #" .. i, group = "tag"}),
		    -- Move client to tag.
		    awful.key({ modkey, "Shift" }, "#" .. i + 9,
		              function ()
		                  if client.focus then
		                      local tag = client.focus.screen.tags[i]
		                      if tag then
		                          client.focus:move_to_tag(tag)
		                      end
		                 end
		              end,
		              {description = "move focused client to tag #"..i, group = "tag"}),
		    -- Toggle tag on focused client.
		    awful.key({ modkey, "Control", "Shift" }, "#" .. i + 9,
		              function ()
		                  if client.focus then
		                      local tag = client.focus.screen.tags[i]
		                      if tag then
		                          client.focus:toggle_tag(tag)
		                      end
		                  end
		              end,
		              {description = "toggle focused client on tag #" .. i, group = "tag"})
		)
	end

	clientbuttons = gears.table.join(
		awful.button({ }, 1, function (c)
		    c:emit_signal("request::activate", "mouse_click", {raise = true})
		end),
		awful.button({ modkey }, 1, function (c)
		    c:emit_signal("request::activate", "mouse_click", {raise = true})
		    awful.mouse.client.move(c)
		end),
		awful.button({ modkey }, 3, function (c) 
		    c:emit_signal("request::activate", "mouse_click", {raise = true})
		    awful.mouse.client.resize(c)
		end),
		awful.button({ modkey, "Control" }, 3, function (c) -- Even on tiling mode, it will set window to floating mode and ontop
		    c:emit_signal("request::activate", "mouse_click", {raise = true})
        awful.client.floating.toggle(c)     -- Toggles windows to floating mode
        c.ontop = not c.ontop               -- Toggles window always on top
		    --awful.mouse.client.resize(c)        -- Resizes windows with cursor
		end)
	)
	
	-- Set keys
	root.keys(globalkeys)
	-- }}}

	-- {{{ Rules
	-- Rules to apply to new clients (through the "manage" signal).
	awful.rules.rules = {
		-- All clients will match this rule.
		{ rule = { },
		  properties = { border_width = beautiful.border_width,
		                 border_color = beautiful.border_normal,
		                 focus = awful.client.focus.filter,
		                 raise = true,
		                 keys = clientkeys,
		                 buttons = clientbuttons,
		                 screen = awful.screen.preferred,
		                 placement = awful.placement.no_overlap+awful.placement.no_offscreen
		 }
		},

		-- Floating clients.
		{	rule_any = {
				instance = {
					"DTA",					-- Firefox addon DownThemAll.
					"copyq",				-- Includes session name in class.
					"pinentry",
					"riseup-vpn",
					"gcr-prompter",
          --"soffice",
          "system-config",
		    	},
          class = {
					"Arandr",
					"Blueman-manager",
					"Gpick",
					"Kruler",
					"MessageWin",		-- kalarm.
					"Sxiv",
					"Tor Browser",		-- Needs a fixed window size to avoid fingerprinting by screen size.
					"Wpa_gui",
					"veromix",
					"xtightvncviewer",
					"Gnome-Calculator", -- Gnome calculator
					"RiseupVPN",        -- Riseup VPN indicator
					"Gcr-prompter",
          "System-config-printer.py",
          --"Soffice",
				},

				-- Note that the name property shown in xprop might be set slightly after creation of the client
				-- and the name shown there might not match defined rules here.
		    	name = {
					"Event Tester", 	-- xev.
					"Calculator",
					"Copying files",
					"Moving files","Confirm",
					"Torrent Options",
					"Creating New Folder",
					"Error",
				},
				role = {
					"AlarmWindow",		-- Thunderbird's calendar.
					"ConfigManager",	-- Thunderbird's about:config.
					"pop-up",			-- e.g. Google Chrome's (detached) Developer Tools.
				},
			}, 

     --   except = {
     --     class = {"libreoffoce-writer"},
     --     instance = {"libreoffice"},
     --   },
      properties = { floating = true,  placement = awful.placement.centered },
		},

		-- Floating clients.
		{	rule_any = {
      --instance = {
      --    "gl",
      --},
      class = {
          "mpv",
          "vlc",
          "zoom",
      },
    },properties = { floating = true,  placement = awful.placement.centered , ontop = true, sticky = true  }
    },
		-- Set Firefox/Google Chrome/Chromium to always map on the tag named "3" on screen 1.
		-- { rule = { class = "Firefox" },
		--   properties = { screen = 1, tag = "2" } },
		{	rule_any = {class	   = {"Firefox", "google-chrome", "Google-chrome"},
							    name  	 = {"Mozilla Firefox"},
							    instance = {"Navigator"},
							    role		 = {"browser"},
			},
			except = { role = "browser-window" },
				--,"chromium-browser", "Chromium-browser", "google-chrome", "Google-chrome"
	  		properties = { tag = "" } --""  tags[1][3]
		},

		{	rule_any =	{name	 = {"Transmission"},
							     role	 = {"tr-main"},
							     class = {"Transmission-gtk","transmission-gtk" },
							     class = {"Brave-browser","brave-browser"},
	  		},

			properties = { tag = "" } --"" tags[9]
		},

		-- Set Atom/Sublime to tag 2
		{	rule_any = {class	= {"Atom"},
							role	    = {"browser-window"},
							class	 	  = {"sublime_text"},
							name 		  = {"Sublime_text"},
							class 		= {"Sublime_text"},
							class		  = {"Apache NetBeans IDE 12.4"},
							instance	= {"java-lang-Thread"},
							class		  = {"Brackets"},
							class		  = {"Geany "},
			},
	  		properties = { tag = "" }
		},
		
		-- Set PCManFM/Thunar/Nautilus to tag 5
		{	rule_any = {instance= {"pcmanfm","thunar"},
							    class	 	= {"Pcmanfm","Thunar"},
							    --instance	= {"thunar"},
							    role		= {"Thunar-"},
							    --class	 = {"Thunar"},
							    instance= {"org.gnome.Nautilus"},
							    class		= {"Org.gnome.Nautilus"},
			},
	  		properties = { tag = "" }
		},

		-- Set Rhythmbox to tag 6
		{	rule_any = {instance= {"rhythmbox"},
							    class	 	= {"Rhythmbox"},
			},
	  		properties = { tag = "" }
		},
		
		-- Add titlebars to normal clients and dialogs
		{	rule_any = {type = { "normal", "dialog" } }, 
				properties = { titlebars_enabled = false }
		},
	}
-- }}}

-- {{{ Signals
-- Signal function to execute when a new client appears.
client.connect_signal("manage", function (c)
    -- Set the windows at the slave,
    -- i.e. put it at the end of others instead of setting it master.
    if not awesome.startup then awful.client.setslave(c) end

    if awesome.startup
      and not c.size_hints.user_position
      and not c.size_hints.program_position then
        -- Prevent clients from being unreachable after screen count changes.
        awful.placement.no_offscreen(c)
    end
end)

-- Add a titlebar if titlebars_enabled is set to true in the rules.
client.connect_signal("request::titlebars", function(c)
    -- buttons for the titlebar
    local buttons = gears.table.join(
        awful.button({ }, 1, function()
            c:emit_signal("request::activate", "titlebar", {raise = true})
            awful.mouse.client.move(c)
        end),
        awful.button({ }, 3, function()
            c:emit_signal("request::activate", "titlebar", {raise = true})
            awful.mouse.client.resize(c)
        end)
    )

    awful.titlebar(c) : setup {
        { -- Left
            awful.titlebar.widget.iconwidget(c),
            buttons = buttons,
            layout  = wibox.layout.fixed.horizontal
        },
        { -- Middle
            { -- Title
                align  = "left",
                widget = awful.titlebar.widget.titlewidget(c)
            },
            buttons = buttons,
            layout  = wibox.layout.flex.horizontal
        },
        { -- Right
            awful.titlebar.widget.floatingbutton (c),
            awful.titlebar.widget.stickybutton   (c),
            awful.titlebar.widget.ontopbutton    (c),
            awful.titlebar.widget.minimizebutton (c),
            awful.titlebar.widget.maximizedbutton(c),
            awful.titlebar.widget.closebutton    (c),
            layout = wibox.layout.fixed.horizontal()
        },
        layout = wibox.layout.align.horizontal
    }
end)

-- Enable sloppy focus, so that focus follows mouse.
client.connect_signal("mouse::enter", function(c)
    c:emit_signal("request::activate", "mouse_enter", {raise = false})
end)

client.connect_signal("focus", function(c) c.border_color = beautiful.border_focus end)
client.connect_signal("unfocus", function(c) c.border_color = beautiful.border_normal end)
-- }}}

-- Hotkeys list, set font size.
beautiful.get().hotkeys_font = "Ubuntu Mono Bold 16"
beautiful.get().hotkeys_description_font = "Ubuntu Mono Bold 14"

--menubar_font="Ubuntu Mono Bold 40"

awful.spawn.once("compton")
awful.spawn.once("nm-applet")
awful.spawn.once("clipit")
awful.spawn.once("numlockx on")
awful.spawn.once("riseup-vpn.launcher")
awful.spawn.once("kdeconnect-indicator")
awful.spawn.once("xfce4-power-manager")
awful.spawn.once("blueman-applet")
awful.spawn.once("unclutter-classic")
awful.spawn.once("redshift")
awful.spawn.once("redshift -x")
awful.spawn.once("brightnessctl s 255")
awful.spawn.once("lxpolkit")
--awful.util.spawn("volumeicon")
--awful.util.spawn("xinput set-prop \"DELL0812:00 04F3:30C4 Touchpad\" \"libinput Click Method Enabled\" 1 1") -- Sets two finger right click
--awful.spawn.with_shell



--
--
-- Try this to fix calender...
-- tag       = mouse.screen.selected_tag,
--
--
